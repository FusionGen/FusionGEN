{"version":3,"file":"condition.js","sourceRoot":"","sources":["../../../src/less/tree/condition.js"],"names":[],"mappings":";;;;;AAAA,gDAA0B;AAE1B,IAAM,SAAS,GAAG,UAAS,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM;IAC1C,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;IACpB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACzB,CAAC,CAAC;AAEF,SAAS,CAAC,SAAS,GAAG,IAAI,cAAI,EAAE,CAAC;AAEjC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,OAAO;IACzC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,CAAC,CAAA;AAED,SAAS,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,OAAO;IACvC,IAAM,MAAM,GAAG,CAAC,UAAC,EAAE,EAAE,CAAC,EAAE,CAAC;QACrB,QAAQ,EAAE,EAAE;YACR,KAAK,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1B,KAAK,IAAI,CAAC,CAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1B;gBACI,QAAQ,cAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;oBACxB,KAAK,CAAC,CAAC;wBACH,OAAO,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC;oBACpD,KAAK,CAAC;wBACF,OAAO,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC;oBACnE,KAAK,CAAC;wBACF,OAAO,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,CAAC;oBACrC;wBACI,OAAO,KAAK,CAAC;iBACpB;SACR;IACL,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAElE,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;AAC1C,CAAC,CAAC;AAEF,SAAS,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;AACvC,kBAAe,SAAS,CAAC","sourcesContent":["import Node from './node';\n\nconst Condition = function(op, l, r, i, negate) {\n    this.op = op.trim();\n    this.lvalue = l;\n    this.rvalue = r;\n    this._index = i;\n    this.negate = negate;\n};\n\nCondition.prototype = new Node();\n\nCondition.prototype.accept = function(visitor) {\n    this.lvalue = visitor.visit(this.lvalue);\n    this.rvalue = visitor.visit(this.rvalue);\n}\n\nCondition.prototype.eval = function(context) {\n    const result = ((op, a, b) => {\n        switch (op) {\n            case 'and': return a && b;\n            case 'or':  return a || b;\n            default:\n                switch (Node.compare(a, b)) {\n                    case -1:\n                        return op === '<' || op === '=<' || op === '<=';\n                    case 0:\n                        return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                    case 1:\n                        return op === '>' || op === '>=';\n                    default:\n                        return false;\n                }\n        }\n    })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n    return this.negate ? !result : result;\n};\n\nCondition.prototype.type = 'Condition';\nexport default Condition;\n"]}