{"version":3,"file":"expression.js","sourceRoot":"","sources":["../../../src/less/tree/expression.js"],"names":[],"mappings":"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","sourcesContent":["import Node from './node';\nimport Paren from './paren';\nimport Comment from './comment';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\nconst Expression = function(value, noSpacing) {\n    this.value = value;\n    this.noSpacing = noSpacing;\n    if (!value) {\n        throw new Error('Expression requires an array parameter');\n    }\n};\n\nExpression.prototype = new Node();\n\nExpression.prototype.accept = function(visitor) {\n    this.value = visitor.visitArray(this.value);\n};\n\nExpression.prototype.eval = function(context) {\n    let returnValue;\n    const mathOn = context.isMathOn();\n\n    const inParenthesis = this.parens && \n        (context.math !== MATH.STRICT_LEGACY || !this.parensInOp);\n\n    let doubleParen = false;\n    if (inParenthesis) {\n        context.inParenthesis();\n    }\n    if (this.value.length > 1) {\n        returnValue = new Expression(this.value.map(e => {\n            if (!e.eval) {\n                return e;\n            }\n            return e.eval(context);\n        }), this.noSpacing);\n    } else if (this.value.length === 1) {\n        if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n            doubleParen = true;\n        }\n        returnValue = this.value[0].eval(context);\n    } else {\n        returnValue = this;\n    }\n    if (inParenthesis) {\n        context.outOfParenthesis();\n    }\n    if (this.parens && this.parensInOp && !mathOn && !doubleParen \n        && (!(returnValue instanceof Dimension))) {\n        returnValue = new Paren(returnValue);\n    }\n    return returnValue;\n};\n\nExpression.prototype.genCSS = function(context, output) {\n    for (let i = 0; i < this.value.length; i++) {\n        this.value[i].genCSS(context, output);\n        if (!this.noSpacing && i + 1 < this.value.length) {\n            output.add(' ');\n        }\n    }\n};\n\nExpression.prototype.throwAwayComments = function() {\n    this.value = this.value.filter(v => !(v instanceof Comment));\n};\n\nExpression.prototype.type = 'Expression';\nexport default Expression;\n"]}